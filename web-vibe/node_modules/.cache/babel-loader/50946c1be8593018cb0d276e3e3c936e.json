{"ast":null,"code":"var _jsxFileName = \"/Users/visheshbajpayee/Documents/repositories/portfolio/web-vibe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { ThemeProvider } from \"styled-components\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport { dark } from \"./styles/Themes\";\nimport { LocomotiveScrollProvider } from \"react-locomotive-scroll\";\nimport { useRef } from \"react\";\nimport \"locomotive-scroll/dist/locomotive-scroll.css\";\nimport Home from \"./sections/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const containerRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: dark,\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocomotiveScrollProvider, {\n        options: {\n          smooth: true // ... all available Locomotive Scroll instance options\n\n        },\n        watch: [//..all the dependencies you want to watch to update the scroll.\n          //  Basicaly, you would want to watch page/location changes\n          //  For exemple, on Next.js you would want to watch properties like `router.asPath` (you may want to add more criterias if the instance should be update on locations with query parameters)\n        ],\n        containerRef: containerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"5okL0DAk6Atnb3+Rru+wGBWyP+4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/visheshbajpayee/Documents/repositories/portfolio/web-vibe/src/App.js"],"names":["ThemeProvider","GlobalStyles","dark","LocomotiveScrollProvider","useRef","Home","App","containerRef","smooth"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,mBAA9B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,wBAAT,QAAyC,yBAAzC;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAO,8CAAP;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,YAAY,GAAGH,MAAM,CAAC,IAAD,CAA3B;AACA,sBACE;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEF,IAAtB;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,wBAAD;AACE,QAAA,OAAO,EAAE;AACPM,UAAAA,MAAM,EAAE,IADD,CAEP;;AAFO,SADX;AAKE,QAAA,KAAK,EACH,CACE;AACA;AACA;AAHF,SANJ;AAYE,QAAA,YAAY,EAAED;AAZhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD;;GAzBQD,G;;KAAAA,G;AA2BT,eAAeA,GAAf","sourcesContent":["import { ThemeProvider } from \"styled-components\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport { dark } from \"./styles/Themes\";\nimport { LocomotiveScrollProvider } from \"react-locomotive-scroll\";\nimport { useRef } from \"react\";\nimport \"locomotive-scroll/dist/locomotive-scroll.css\";\nimport Home from \"./sections/Home\";\nfunction App() {\n  const containerRef = useRef(null);\n  return (\n    <>\n      <ThemeProvider theme={dark}>\n        <GlobalStyles />\n        <LocomotiveScrollProvider\n          options={{\n            smooth: true,\n            // ... all available Locomotive Scroll instance options\n          }}\n          watch={\n            [\n              //..all the dependencies you want to watch to update the scroll.\n              //  Basicaly, you would want to watch page/location changes\n              //  For exemple, on Next.js you would want to watch properties like `router.asPath` (you may want to add more criterias if the instance should be update on locations with query parameters)\n            ]\n          }\n          containerRef={containerRef}\n        >\n         \n        </LocomotiveScrollProvider>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}